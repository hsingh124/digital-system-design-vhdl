library ieee;
use ieee.numeric_std
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;

entity averaging_filter is

	port(
			clk			: in bit_1;
			is_period	: in bit_1;
			data_in		: in bit_16;
			data_out		: out bit_16
	);

end averaging_filter;

architecture behaviour of averaging_filter is

	signal clk_count 			: bit_16 := X"0000";
	signal clk_count_temp	: bit_16 := x"0000";
	signal data_avg			: bit_16 := x"0000";
	signal data_sum			: bit_16 := X"0000";
	
begin

	process(clk)
	begin
		if rising_edge(clk) then
			if is_period = '1' then
				clk_count <= data_in;
				clk_count_temp <= data_in;
			else 
				if clk_count_temp > 0 then
					data_sum <= data_sum + data_in;
					clk_count_temp <= clk_count_temp - X"0001";
					if clk_count_temp = 0 then
						-- data_avg <= data_sum / clk_count;
						data_avg <= std_logic_vector(to_unsigned(to_integer(unsigned(data_sum)) / to_integer(unsigned(clk_count))), data_avg'length);
					end if;
				end if;
			end if;
		end if;
	end process;

	data_out <= data_avg;
	
end behaviour;